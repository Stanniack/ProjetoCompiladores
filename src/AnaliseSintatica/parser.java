
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 20 16:10:35 BRT 2019
//----------------------------------------------------

package AnaliseSintatica;

import java.io.*;
import java_cup.runtime.*;
import AnaliseSintatica.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 20 16:10:35 BRT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\024\003\000\002\024\004\000\002\004" +
    "\005\000\002\004\006\000\002\006\006\000\002\006\007" +
    "\000\002\006\006\000\002\006\007\000\002\006\006\000" +
    "\002\006\007\000\002\006\010\000\002\006\011\000\002" +
    "\006\011\000\002\023\005\000\002\023\006\000\002\023" +
    "\005\000\002\023\006\000\002\023\005\000\002\023\005" +
    "\000\002\005\007\000\002\005\010\000\002\005\007\000" +
    "\002\005\007\000\002\005\010\000\002\005\007\000\002" +
    "\005\007\000\002\005\010\000\002\005\007\000\002\005" +
    "\011\000\002\005\012\000\002\005\011\000\002\005\012" +
    "\000\002\012\007\000\002\012\010\000\002\012\007\000" +
    "\002\012\010\000\002\015\006\000\002\015\007\000\002" +
    "\015\006\000\002\015\007\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\007\007\000\002\007\007" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\010\000\002\016\012\000\002" +
    "\016\013\000\002\016\013\000\002\016\013\000\002\016" +
    "\014\000\002\016\014\000\002\016\013\000\002\016\014" +
    "\000\002\016\014\000\002\010\013\000\002\010\014\000" +
    "\002\010\014\000\002\010\014\000\002\010\013\000\002" +
    "\010\014\000\002\010\014\000\002\020\006\000\002\020" +
    "\007\000\002\017\012\000\002\017\013\000\002\017\011" +
    "\000\002\017\013\000\002\017\013\000\002\017\014\000" +
    "\002\017\013\000\002\017\014\000\002\011\023\000\002" +
    "\011\024\000\002\011\024\000\002\011\025\000\002\022" +
    "\014\000\002\022\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\004\044\005\001\002\000\004\002\u010a\001" +
    "\002\000\004\025\006\001\002\000\004\004\007\001\002" +
    "\000\022\005\014\007\031\020\012\022\021\023\032\026" +
    "\023\040\013\043\030\001\002\000\006\005\ufffa\015\ufffa" +
    "\001\002\000\006\005\ufff7\015\ufff7\001\002\000\004\012" +
    "\351\001\002\000\024\005\ufff4\007\031\015\ufff4\020\012" +
    "\022\021\023\032\026\023\040\013\043\030\001\002\000" +
    "\004\002\000\001\002\000\006\005\ufffd\015\ufffd\001\002" +
    "\000\004\005\347\001\002\000\006\005\ufffe\015\ufffe\001" +
    "\002\000\006\005\ufff9\015\ufff9\001\002\000\004\023\344" +
    "\001\002\000\006\005\ufff6\015\ufff6\001\002\000\004\012" +
    "\333\001\002\000\006\005\ufffb\015\ufffb\001\002\000\006" +
    "\005\ufff5\015\ufff5\001\002\000\006\005\ufff8\015\ufff8\001" +
    "\002\000\006\005\ufffc\015\ufffc\001\002\000\004\012\262" +
    "\001\002\000\004\012\204\001\002\000\006\016\034\032" +
    "\033\001\002\000\014\012\062\021\064\023\057\027\060" +
    "\035\056\001\002\000\004\035\035\001\002\000\004\017" +
    "\036\001\002\000\004\032\037\001\002\000\004\016\040" +
    "\001\002\000\006\027\041\035\042\001\002\000\006\017" +
    "\051\041\052\001\002\000\006\017\044\041\045\001\002" +
    "\000\006\005\uffe8\015\uffe8\001\002\000\004\024\047\001" +
    "\002\000\006\027\041\035\042\001\002\000\006\005\uffe3" +
    "\015\uffe3\001\002\000\024\005\uffe7\007\031\015\uffe7\020" +
    "\012\022\021\023\032\026\023\040\013\043\030\001\002" +
    "\000\006\005\uffe6\015\uffe6\001\002\000\004\024\054\001" +
    "\002\000\006\027\041\035\042\001\002\000\006\005\uffe2" +
    "\015\uffe2\001\002\000\024\005\uffe5\007\031\015\uffe5\020" +
    "\012\022\021\023\032\026\023\040\013\043\030\001\002" +
    "\000\006\005\uffe4\015\uffe4\001\002\000\012\006\152\024" +
    "\176\037\177\041\130\001\002\000\004\006\174\001\002" +
    "\000\006\024\172\041\135\001\002\000\004\024\170\001" +
    "\002\000\006\012\062\035\142\001\002\000\004\024\140" +
    "\001\002\000\006\024\065\041\066\001\002\000\024\005" +
    "\uffec\007\031\015\uffec\020\012\022\021\023\032\026\023" +
    "\040\013\043\030\001\002\000\006\022\070\023\067\001" +
    "\002\000\004\032\123\001\002\000\004\023\072\001\002" +
    "\000\006\005\uffd9\015\uffd9\001\002\000\006\016\074\032" +
    "\073\001\002\000\010\021\104\027\103\035\102\001\002" +
    "\000\004\035\075\001\002\000\004\017\076\001\002\000" +
    "\004\032\077\001\002\000\004\016\100\001\002\000\006" +
    "\027\041\035\042\001\002\000\006\005\uffd5\015\uffd5\001" +
    "\002\000\010\024\113\037\114\041\115\001\002\000\006" +
    "\024\110\041\111\001\002\000\006\024\105\041\106\001" +
    "\002\000\006\005\uffdb\015\uffdb\001\002\000\006\022\070" +
    "\023\067\001\002\000\006\005\uffda\015\uffda\001\002\000" +
    "\006\005\uffe1\015\uffe1\001\002\000\006\022\070\023\067" +
    "\001\002\000\006\005\uffe0\015\uffe0\001\002\000\006\005" +
    "\uffde\015\uffde\001\002\000\004\035\117\001\002\000\006" +
    "\022\070\023\067\001\002\000\006\005\uffdd\015\uffdd\001" +
    "\002\000\006\024\120\041\121\001\002\000\006\005\uffd8" +
    "\015\uffd8\001\002\000\006\022\070\023\067\001\002\000" +
    "\006\005\uffd7\015\uffd7\001\002\000\010\021\126\027\124" +
    "\035\125\001\002\000\004\041\135\001\002\000\006\037" +
    "\127\041\130\001\002\000\004\041\066\001\002\000\004" +
    "\035\132\001\002\000\006\022\070\023\067\001\002\000" +
    "\006\005\uffdc\015\uffdc\001\002\000\004\041\133\001\002" +
    "\000\006\022\070\023\067\001\002\000\006\005\uffd6\015" +
    "\uffd6\001\002\000\006\022\070\023\067\001\002\000\006" +
    "\005\uffdf\015\uffdf\001\002\000\006\005\uffeb\015\uffeb\001" +
    "\002\000\024\005\uffd0\007\031\015\uffd0\020\012\022\021" +
    "\023\032\026\023\040\013\043\030\001\002\000\006\005" +
    "\uffcf\015\uffcf\001\002\000\004\006\156\001\002\000\004" +
    "\006\144\001\002\000\010\012\062\023\057\035\145\001" +
    "\002\000\006\006\152\013\153\001\002\000\004\013\151" +
    "\001\002\000\004\013\150\001\002\000\014\006\uffc4\013" +
    "\uffc4\023\uffc4\024\uffc4\035\uffc4\001\002\000\014\006\uffc5" +
    "\013\uffc5\023\uffc5\024\uffc5\035\uffc5\001\002\000\006\023" +
    "\057\035\154\001\002\000\014\006\uffc6\013\uffc6\023\uffc6" +
    "\024\uffc6\035\uffc6\001\002\000\010\006\152\013\uffcc\024" +
    "\uffcc\001\002\000\006\013\uffcb\024\uffcb\001\002\000\010" +
    "\012\062\023\057\035\157\001\002\000\006\006\152\013" +
    "\167\001\002\000\010\013\165\023\057\035\163\001\002" +
    "\000\004\013\162\001\002\000\014\006\uffc8\013\uffc8\023" +
    "\uffc8\024\uffc8\035\uffc8\001\002\000\004\006\152\001\002" +
    "\000\004\013\166\001\002\000\014\006\uffc7\013\uffc7\023" +
    "\uffc7\024\uffc7\035\uffc7\001\002\000\014\006\uffc3\013\uffc3" +
    "\023\uffc3\024\uffc3\035\uffc3\001\002\000\014\006\uffc9\013" +
    "\uffc9\023\uffc9\024\uffc9\035\uffc9\001\002\000\024\005\uffce" +
    "\007\031\015\uffce\020\012\022\021\023\032\026\023\040" +
    "\013\043\030\001\002\000\006\005\uffcd\015\uffcd\001\002" +
    "\000\024\005\uffee\007\031\015\uffee\020\012\022\021\023" +
    "\032\026\023\040\013\043\030\001\002\000\006\005\uffed" +
    "\015\uffed\001\002\000\006\023\057\035\163\001\002\000" +
    "\006\013\uffca\024\uffca\001\002\000\024\005\ufff0\007\031" +
    "\015\ufff0\020\012\022\021\023\032\026\023\040\013\043" +
    "\030\001\002\000\004\035\200\001\002\000\006\024\201" +
    "\041\133\001\002\000\024\005\uffea\007\031\015\uffea\020" +
    "\012\022\021\023\032\026\023\040\013\043\030\001\002" +
    "\000\006\005\uffe9\015\uffe9\001\002\000\006\005\uffef\015" +
    "\uffef\001\002\000\004\023\205\001\002\000\006\030\206" +
    "\031\207\001\002\000\004\023\250\001\002\000\004\023" +
    "\210\001\002\000\004\013\211\001\002\000\004\014\212" +
    "\001\002\000\020\007\031\020\012\022\021\023\032\026" +
    "\023\040\013\043\030\001\002\000\004\015\214\001\002" +
    "\000\026\005\uffbc\007\031\010\217\015\uffbc\020\012\022" +
    "\021\023\032\026\023\040\013\043\030\001\002\000\006" +
    "\005\uffbb\015\uffbb\001\002\000\006\005\uffba\015\uffba\001" +
    "\002\000\004\012\220\001\002\000\004\023\221\001\002" +
    "\000\006\030\222\031\223\001\002\000\004\023\233\001" +
    "\002\000\004\023\224\001\002\000\004\013\225\001\002" +
    "\000\004\014\226\001\002\000\020\007\031\020\012\022" +
    "\021\023\032\026\023\040\013\043\030\001\002\000\004" +
    "\015\230\001\002\000\026\005\uffb5\007\031\010\217\015" +
    "\uffb5\020\012\022\021\023\032\026\023\040\013\043\030" +
    "\001\002\000\006\005\uffb4\015\uffb4\001\002\000\006\005" +
    "\uffb3\015\uffb3\001\002\000\004\013\234\001\002\000\004" +
    "\014\235\001\002\000\020\007\031\020\012\022\021\023" +
    "\032\026\023\040\013\043\030\001\002\000\004\015\237" +
    "\001\002\000\030\005\uffb9\007\031\010\217\011\240\015" +
    "\uffb9\020\012\022\021\023\032\026\023\040\013\043\030" +
    "\001\002\000\004\014\244\001\002\000\006\005\uffb8\015" +
    "\uffb8\001\002\000\006\005\uffb7\015\uffb7\001\002\000\006" +
    "\005\uffb6\015\uffb6\001\002\000\020\007\031\020\012\022" +
    "\021\023\032\026\023\040\013\043\030\001\002\000\004" +
    "\015\246\001\002\000\024\005\uffb2\007\031\015\uffb2\020" +
    "\012\022\021\023\032\026\023\040\013\043\030\001\002" +
    "\000\006\005\uffb1\015\uffb1\001\002\000\004\013\251\001" +
    "\002\000\004\014\252\001\002\000\022\007\031\015\254" +
    "\020\012\022\021\023\032\026\023\040\013\043\030\001" +
    "\002\000\004\015\257\001\002\000\026\005\uffc2\007\031" +
    "\011\240\015\uffc2\020\012\022\021\023\032\026\023\040" +
    "\013\043\030\001\002\000\006\005\uffc1\015\uffc1\001\002" +
    "\000\006\005\uffc0\015\uffc0\001\002\000\026\005\uffbf\007" +
    "\031\010\217\015\uffbf\020\012\022\021\023\032\026\023" +
    "\040\013\043\030\001\002\000\006\005\uffbe\015\uffbe\001" +
    "\002\000\006\005\uffbd\015\uffbd\001\002\000\006\022\264" +
    "\023\263\001\002\000\004\032\314\001\002\000\004\023" +
    "\265\001\002\000\006\025\267\032\266\001\002\000\004" +
    "\035\276\001\002\000\004\023\270\001\002\000\004\013" +
    "\271\001\002\000\004\014\272\001\002\000\020\007\031" +
    "\020\012\022\021\023\032\026\023\040\013\043\030\001" +
    "\002\000\004\015\274\001\002\000\024\005\uffa4\007\031" +
    "\015\uffa4\020\012\022\021\023\032\026\023\040\013\043" +
    "\030\001\002\000\006\005\uffa3\015\uffa3\001\002\000\004" +
    "\024\277\001\002\000\004\023\300\001\002\000\004\031" +
    "\301\001\002\000\004\035\302\001\002\000\004\024\303" +
    "\001\002\000\004\023\304\001\002\000\004\006\305\001" +
    "\002\000\004\006\306\001\002\000\004\013\307\001\002" +
    "\000\004\014\310\001\002\000\020\007\031\020\012\022" +
    "\021\023\032\026\023\040\013\043\030\001\002\000\004" +
    "\015\312\001\002\000\024\005\uffa6\007\031\015\uffa6\020" +
    "\012\022\021\023\032\026\023\040\013\043\030\001\002" +
    "\000\006\005\uffa5\015\uffa5\001\002\000\004\035\315\001" +
    "\002\000\004\024\316\001\002\000\004\023\317\001\002" +
    "\000\004\031\320\001\002\000\004\035\321\001\002\000" +
    "\004\024\322\001\002\000\004\023\323\001\002\000\004" +
    "\006\324\001\002\000\004\006\325\001\002\000\004\013" +
    "\326\001\002\000\004\014\327\001\002\000\020\007\031" +
    "\020\012\022\021\023\032\026\023\040\013\043\030\001" +
    "\002\000\004\015\331\001\002\000\024\005\uffa8\007\031" +
    "\015\uffa8\020\012\022\021\023\032\026\023\040\013\043" +
    "\030\001\002\000\006\005\uffa7\015\uffa7\001\002\000\006" +
    "\023\334\027\335\001\002\000\004\013\341\001\002\000" +
    "\004\013\336\001\002\000\004\024\337\001\002\000\024" +
    "\005\uffd4\007\031\015\uffd4\020\012\022\021\023\032\026" +
    "\023\040\013\043\030\001\002\000\006\005\uffd3\015\uffd3" +
    "\001\002\000\004\024\342\001\002\000\024\005\uffd2\007" +
    "\031\015\uffd2\020\012\022\021\023\032\026\023\040\013" +
    "\043\030\001\002\000\006\005\uffd1\015\uffd1\001\002\000" +
    "\010\016\074\024\345\032\073\001\002\000\024\005\ufff2" +
    "\007\031\015\ufff2\020\012\022\021\023\032\026\023\040" +
    "\013\043\030\001\002\000\006\005\ufff1\015\ufff1\001\002" +
    "\000\004\002\uffff\001\002\000\006\005\ufff3\015\ufff3\001" +
    "\002\000\010\021\354\023\352\042\353\001\002\000\004" +
    "\031\375\001\002\000\004\023\367\001\002\000\006\013" +
    "\356\023\355\001\002\000\004\013\362\001\002\000\004" +
    "\014\357\001\002\000\020\007\031\020\012\022\021\023" +
    "\032\026\023\040\013\043\030\001\002\000\004\015\361" +
    "\001\002\000\006\005\uffae\015\uffae\001\002\000\004\014" +
    "\363\001\002\000\020\007\031\020\012\022\021\023\032" +
    "\026\023\040\013\043\030\001\002\000\004\015\365\001" +
    "\002\000\020\007\031\020\012\022\021\023\032\026\023" +
    "\040\013\043\030\001\002\000\006\005\uffad\015\uffad\001" +
    "\002\000\004\013\370\001\002\000\004\014\371\001\002" +
    "\000\020\007\031\020\012\022\021\023\032\026\023\040" +
    "\013\043\030\001\002\000\004\015\373\001\002\000\024" +
    "\005\uffb0\007\031\015\uffb0\020\012\022\021\023\032\026" +
    "\023\040\013\043\030\001\002\000\006\005\uffaf\015\uffaf" +
    "\001\002\000\006\023\377\035\376\001\002\000\004\013" +
    "\u0105\001\002\000\004\013\u0100\001\002\000\004\014\u0101" +
    "\001\002\000\020\007\031\020\012\022\021\023\032\026" +
    "\023\040\013\043\030\001\002\000\004\015\u0103\001\002" +
    "\000\024\005\uffac\007\031\015\uffac\020\012\022\021\023" +
    "\032\026\023\040\013\043\030\001\002\000\006\005\uffab" +
    "\015\uffab\001\002\000\004\014\u0106\001\002\000\020\007" +
    "\031\020\012\022\021\023\032\026\023\040\013\043\030" +
    "\001\002\000\004\015\u0108\001\002\000\024\005\uffaa\007" +
    "\031\015\uffaa\020\012\022\021\023\032\026\023\040\013" +
    "\043\030\001\002\000\006\005\uffa9\015\uffa9\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\015\004\016" +
    "\005\026\006\014\011\010\012\023\015\007\016\017\017" +
    "\025\022\021\024\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\347\004\016\005" +
    "\026\006\014\011\010\012\023\015\007\016\017\017\025" +
    "\022\021\024\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\060\014\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\045\001" +
    "\001\000\002\001\001\000\030\003\047\004\016\005\026" +
    "\006\014\011\010\012\023\015\007\016\017\017\025\022" +
    "\021\024\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\052\001\001\000\002\001\001\000\030\003" +
    "\054\004\016\005\026\006\014\011\010\012\023\015\007" +
    "\016\017\017\025\022\021\024\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\136\004\016\005\026" +
    "\006\014\011\010\012\023\015\007\016\017\017\025\022" +
    "\021\024\024\001\001\000\004\005\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\133\001\001\000\002\001\001\000\004\005\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\140" +
    "\004\016\005\026\006\014\011\010\012\023\015\007\016" +
    "\017\017\025\022\021\024\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\145\014" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\157\014\160\001\001\000\002\001" +
    "\001\000\004\014\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\170" +
    "\004\016\005\026\006\014\011\010\012\023\015\007\016" +
    "\017\017\025\022\021\024\024\001\001\000\002\001\001" +
    "\000\030\003\172\004\016\005\026\006\014\011\010\012" +
    "\023\015\007\016\017\017\025\022\021\024\024\001\001" +
    "\000\002\001\001\000\004\014\174\001\001\000\002\001" +
    "\001\000\030\003\202\004\016\005\026\006\014\011\010" +
    "\012\023\015\007\016\017\017\025\022\021\024\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\201" +
    "\004\016\005\026\006\014\011\010\012\023\015\007\016" +
    "\017\017\025\022\021\024\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\212\004\016\005\026\006\014\011" +
    "\010\012\023\015\007\016\017\017\025\022\021\024\024" +
    "\001\001\000\002\001\001\000\032\003\214\004\016\005" +
    "\026\006\014\010\215\011\010\012\023\015\007\016\017" +
    "\017\025\022\021\024\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\226\004\016\005\026" +
    "\006\014\011\010\012\023\015\007\016\017\017\025\022" +
    "\021\024\024\001\001\000\002\001\001\000\032\003\230" +
    "\004\016\005\026\006\014\010\231\011\010\012\023\015" +
    "\007\016\017\017\025\022\021\024\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\235\004\016\005\026\006\014\011\010" +
    "\012\023\015\007\016\017\017\025\022\021\024\024\001" +
    "\001\000\002\001\001\000\034\003\241\004\016\005\026" +
    "\006\014\010\242\011\010\012\023\015\007\016\017\017" +
    "\025\020\240\022\021\024\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\244\004\016\005\026\006\014\011\010\012\023" +
    "\015\007\016\017\017\025\022\021\024\024\001\001\000" +
    "\002\001\001\000\030\003\246\004\016\005\026\006\014" +
    "\011\010\012\023\015\007\016\017\017\025\022\021\024" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\252\004\016\005\026\006\014\011" +
    "\010\012\023\015\007\016\017\017\025\022\021\024\024" +
    "\001\001\000\002\001\001\000\032\003\255\004\016\005" +
    "\026\006\014\011\010\012\023\015\007\016\017\017\025" +
    "\020\254\022\021\024\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\257\004\016\005\026\006\014" +
    "\010\260\011\010\012\023\015\007\016\017\017\025\022" +
    "\021\024\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\272\004\016\005" +
    "\026\006\014\011\010\012\023\015\007\016\017\017\025" +
    "\022\021\024\024\001\001\000\002\001\001\000\030\003" +
    "\274\004\016\005\026\006\014\011\010\012\023\015\007" +
    "\016\017\017\025\022\021\024\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\310\004\016\005\026\006\014\011" +
    "\010\012\023\015\007\016\017\017\025\022\021\024\024" +
    "\001\001\000\002\001\001\000\030\003\312\004\016\005" +
    "\026\006\014\011\010\012\023\015\007\016\017\017\025" +
    "\022\021\024\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\327\004\016\005\026\006\014\011" +
    "\010\012\023\015\007\016\017\017\025\022\021\024\024" +
    "\001\001\000\002\001\001\000\030\003\331\004\016\005" +
    "\026\006\014\011\010\012\023\015\007\016\017\017\025" +
    "\022\021\024\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\337\004\016\005\026\006\014\011\010\012" +
    "\023\015\007\016\017\017\025\022\021\024\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\342\004" +
    "\016\005\026\006\014\011\010\012\023\015\007\016\017" +
    "\017\025\022\021\024\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\345\004\016\005\026\006\014" +
    "\011\010\012\023\015\007\016\017\017\025\022\021\024" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\357\004\016\005\026\006\014\011\010\012" +
    "\023\015\007\016\017\017\025\022\021\024\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\363\004\016\005\026\006\014\011\010\012\023" +
    "\015\007\016\017\017\025\022\021\024\024\001\001\000" +
    "\002\001\001\000\030\003\365\004\016\005\026\006\014" +
    "\011\010\012\023\015\007\016\017\017\025\022\021\024" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\371\004\016\005\026\006\014\011" +
    "\010\012\023\015\007\016\017\017\025\022\021\024\024" +
    "\001\001\000\002\001\001\000\030\003\373\004\016\005" +
    "\026\006\014\011\010\012\023\015\007\016\017\017\025" +
    "\022\021\024\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\u0101\004\016\005\026\006\014\011\010\012" +
    "\023\015\007\016\017\017\025\022\021\024\024\001\001" +
    "\000\002\001\001\000\030\003\u0103\004\016\005\026\006" +
    "\014\011\010\012\023\015\007\016\017\017\025\022\021" +
    "\024\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\u0106\004\016\005\026\006\014\011\010\012\023" +
    "\015\007\016\017\017\025\022\021\024\024\001\001\000" +
    "\002\001\001\000\030\003\u0108\004\016\005\026\006\014" +
    "\011\010\012\023\015\007\016\017\017\025\022\021\024" +
    "\024\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public Symbol s;

	/*public static void main (String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new parser(new Yylex(System.in)).parse();
	}*/
	
	public void syntax_error(Symbol s){
                this.s = s;
		report_error("Error de sintaxis. Linha: " +(s.right + 1) +
		" Coluna: " + s.left + ". Texto: \"" + s.value + "\"", null);
       // public static void carregar(String arquivo) throws Exception{
       // new parser(new Yylex(new FileInputStream(arquivo))).parse();
        }

        public Symbol getS () {
            return s;
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // laco_for_each ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR DOIS_PONTOS VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for_each",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // laco_for_each ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR DOIS_PONTOS VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for_each",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // laco_for ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // laco_for ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // laco_for ::= FOR ABRE_PARENTESES VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // laco_for ::= FOR ABRE_PARENTESES VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL NUMERO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL NUMERO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // laco_while ::= WHILE ABRE_PARENTESES BOOLEAN VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // laco_while ::= WHILE ABRE_PARENTESES BOOLEAN FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // laco_while ::= WHILE ABRE_PARENTESES OPERADOR_LOGICO_NOT VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // laco_while ::= WHILE ABRE_PARENTESES OPERADOR_LOGICO_NOT VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicional_senao ::= COND_ELSE ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicional_senao ::= COND_ELSE ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES FECHA_CHAVES condicional_senao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO operacao_aritmetica_parenteses operacao_aritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES operacao_aritmetica_parenteses OPERADOR_ARITMETICO operacao_aritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES operacao_aritmetica_parenteses OPERADOR_ARITMETICO operacao_aritmetica_parenteses FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES operacao_aritmetica_parenteses OPERADOR_ARITMETICO NUMERO FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO operacao_aritmetica_parenteses FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO operacao_aritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO NUMERO FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacao_aritmetica ::= VAR OPERADOR_ARITMETICO operacao_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacao_aritmetica ::= NUMERO OPERADOR_ARITMETICO operacao_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacao_aritmetica ::= NUMERO OPERADOR_ARITMETICO NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica_parenteses PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica_parenteses PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // escrever ::= PRINT ABRE_PARENTESES VAR FECHA_PARENTESES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // escrever ::= PRINT ABRE_PARENTESES VAR FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // escrever ::= PRINT ABRE_PARENTESES TEXTO FECHA_PARENTESES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // escrever ::= PRINT ABRE_PARENTESES TEXTO FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ABRE_COLCHETES NUMERO FECHA_COLCHETES ATRIBUICAO ABRE_COLCHETES vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracao_atribuicao ::= VAR ATRIBUICAO NUMERO PONTO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracao_atribuicao ::= VAR ATRIBUICAO BOOLEAN VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO BOOLEAN VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO BOOLEAN PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracao_atribuicao ::= VAR ATRIBUICAO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracao_atribuicao ::= VAR ATRIBUICAO TEXTO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO TEXTO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vetores_recursivo ::= TEXTO VIRGULA vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vetores_recursivo ::= NUMERO VIRGULA vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vetores_recursivo ::= TEXTO FECHA_COLCHETES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vetores_recursivo ::= TEXTO FECHA_COLCHETES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vetores_recursivo ::= NUMERO FECHA_COLCHETES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vetores_recursivo ::= NUMERO FECHA_COLCHETES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atribuicao ::= VAR ABRE_COLCHETES NUMERO FECHA_COLCHETES ATRIBUICAO ABRE_COLCHETES vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO NUMERO PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atribuicao ::= VAR ATRIBUICAO BOOLEAN PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atribuicao ::= VAR ATRIBUICAO BOOLEAN PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atribuicao ::= VAR ATRIBUICAO TEXTO PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atribuicao ::= VAR ATRIBUICAO TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracao ::= TIPOS_PRIMITIVOS VAR PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracao ::= TIPOS_PRIMITIVOS VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comentario ::= COMENTARIO_LINHA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comentario ::= COMENTARIO_LINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // programa ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // programa ::= laco_for_each 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // programa ::= laco_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // programa ::= laco_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programa ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa ::= expressao_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa ::= escrever 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= declaracao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= IFMUZ DOIS_PONTOS BEGIN programa END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IFMUZ DOIS_PONTOS BEGIN END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

