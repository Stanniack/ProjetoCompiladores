
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 20 15:59:13 BRT 2019
//----------------------------------------------------

package AnaliseSintatica;

import java.io.*;
import java_cup.runtime.*;
import AnaliseSintatica.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 20 15:59:13 BRT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\005\000\002\004\006\000\002\006\006\000\002\006" +
    "\007\000\002\006\006\000\002\006\007\000\002\006\006" +
    "\000\002\006\007\000\002\006\010\000\002\006\011\000" +
    "\002\006\011\000\002\023\005\000\002\023\006\000\002" +
    "\023\005\000\002\023\006\000\002\023\005\000\002\023" +
    "\005\000\002\005\007\000\002\005\010\000\002\005\007" +
    "\000\002\005\007\000\002\005\010\000\002\005\007\000" +
    "\002\005\007\000\002\005\010\000\002\005\007\000\002" +
    "\005\011\000\002\005\012\000\002\005\011\000\002\005" +
    "\012\000\002\012\007\000\002\012\010\000\002\012\007" +
    "\000\002\012\010\000\002\015\006\000\002\015\007\000" +
    "\002\015\006\000\002\015\007\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\007\007\000\002\007\010\000\002\016\012\000" +
    "\002\016\013\000\002\016\013\000\002\016\013\000\002" +
    "\016\014\000\002\016\014\000\002\016\013\000\002\016" +
    "\014\000\002\016\014\000\002\010\013\000\002\010\014" +
    "\000\002\010\014\000\002\010\014\000\002\010\013\000" +
    "\002\010\014\000\002\010\014\000\002\020\006\000\002" +
    "\020\007\000\002\017\012\000\002\017\013\000\002\017" +
    "\011\000\002\017\013\000\002\017\013\000\002\017\014" +
    "\000\002\017\013\000\002\017\014\000\002\011\023\000" +
    "\002\011\024\000\002\011\024\000\002\011\025\000\002" +
    "\022\014\000\002\022\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\004\045\005\001\002\000\004\002\u0107\001" +
    "\002\000\004\025\006\001\002\000\004\004\007\001\002" +
    "\000\020\005\030\007\016\020\013\022\022\023\021\026" +
    "\023\044\015\001\002\000\004\005\u0106\001\002\000\006" +
    "\005\ufffc\015\ufffc\001\002\000\006\005\ufff9\015\ufff9\001" +
    "\002\000\004\012\345\001\002\000\006\005\ufffe\015\ufffe" +
    "\001\002\000\004\012\274\001\002\000\004\012\216\001" +
    "\002\000\006\005\ufff8\015\ufff8\001\002\000\006\005\ufffa" +
    "\015\ufffa\001\002\000\006\016\133\032\132\001\002\000" +
    "\004\023\042\001\002\000\004\012\031\001\002\000\006" +
    "\005\ufffb\015\ufffb\001\002\000\006\005\ufff7\015\ufff7\001" +
    "\002\000\006\005\ufffd\015\ufffd\001\002\000\006\005\ufff6" +
    "\015\ufff6\001\002\000\004\002\000\001\002\000\006\023" +
    "\032\027\033\001\002\000\004\013\037\001\002\000\004" +
    "\013\034\001\002\000\004\024\035\001\002\000\022\005" +
    "\uffd7\007\016\015\uffd7\020\013\022\022\023\021\026\023" +
    "\044\015\001\002\000\006\005\uffd6\015\uffd6\001\002\000" +
    "\004\024\040\001\002\000\022\005\uffd5\007\016\015\uffd5" +
    "\020\013\022\022\023\021\026\023\044\015\001\002\000" +
    "\006\005\uffd4\015\uffd4\001\002\000\010\016\045\024\043" +
    "\032\044\001\002\000\022\005\ufff5\007\016\015\ufff5\020" +
    "\013\022\022\023\021\026\023\044\015\001\002\000\010" +
    "\021\071\027\067\035\070\001\002\000\004\035\046\001" +
    "\002\000\004\017\047\001\002\000\004\032\050\001\002" +
    "\000\004\016\051\001\002\000\006\027\052\035\053\001" +
    "\002\000\006\017\062\042\063\001\002\000\006\017\055" +
    "\042\056\001\002\000\006\005\uffd8\015\uffd8\001\002\000" +
    "\004\024\060\001\002\000\006\027\052\035\053\001\002" +
    "\000\006\005\uffe6\015\uffe6\001\002\000\022\005\uffea\007" +
    "\016\015\uffea\020\013\022\022\023\021\026\023\044\015" +
    "\001\002\000\006\005\uffe9\015\uffe9\001\002\000\004\024" +
    "\065\001\002\000\006\027\052\035\053\001\002\000\006" +
    "\005\uffe5\015\uffe5\001\002\000\022\005\uffe8\007\016\015" +
    "\uffe8\020\013\022\022\023\021\026\023\044\015\001\002" +
    "\000\006\005\uffe7\015\uffe7\001\002\000\006\024\126\042" +
    "\127\001\002\000\010\024\116\037\117\042\120\001\002" +
    "\000\006\024\072\042\073\001\002\000\006\005\uffde\015" +
    "\uffde\001\002\000\006\022\075\023\074\001\002\000\004" +
    "\032\100\001\002\000\004\023\077\001\002\000\006\005" +
    "\uffdd\015\uffdd\001\002\000\006\016\045\032\044\001\002" +
    "\000\010\021\103\027\101\035\102\001\002\000\004\042" +
    "\114\001\002\000\006\037\106\042\107\001\002\000\004" +
    "\042\104\001\002\000\006\022\075\023\074\001\002\000" +
    "\006\005\uffdc\015\uffdc\001\002\000\004\035\111\001\002" +
    "\000\006\022\075\023\074\001\002\000\006\005\uffdf\015" +
    "\uffdf\001\002\000\004\042\112\001\002\000\006\022\075" +
    "\023\074\001\002\000\006\005\uffd9\015\uffd9\001\002\000" +
    "\006\022\075\023\074\001\002\000\006\005\uffe2\015\uffe2" +
    "\001\002\000\006\005\uffe1\015\uffe1\001\002\000\004\035" +
    "\122\001\002\000\006\022\075\023\074\001\002\000\006" +
    "\005\uffe0\015\uffe0\001\002\000\006\024\123\042\124\001" +
    "\002\000\006\005\uffdb\015\uffdb\001\002\000\006\022\075" +
    "\023\074\001\002\000\006\005\uffda\015\uffda\001\002\000" +
    "\006\005\uffe4\015\uffe4\001\002\000\006\022\075\023\074" +
    "\001\002\000\006\005\uffe3\015\uffe3\001\002\000\006\005" +
    "\ufff4\015\ufff4\001\002\000\014\012\145\021\147\023\143" +
    "\027\141\035\142\001\002\000\004\035\134\001\002\000" +
    "\004\017\135\001\002\000\004\032\136\001\002\000\004" +
    "\016\137\001\002\000\006\027\052\035\053\001\002\000" +
    "\006\005\uffeb\015\uffeb\001\002\000\006\024\214\042\114" +
    "\001\002\000\012\006\164\024\206\037\207\042\107\001" +
    "\002\000\004\006\204\001\002\000\004\024\202\001\002" +
    "\000\006\012\145\035\154\001\002\000\004\024\152\001" +
    "\002\000\006\024\150\042\104\001\002\000\022\005\uffef" +
    "\007\016\015\uffef\020\013\022\022\023\021\026\023\044" +
    "\015\001\002\000\006\005\uffee\015\uffee\001\002\000\022" +
    "\005\uffd3\007\016\015\uffd3\020\013\022\022\023\021\026" +
    "\023\044\015\001\002\000\006\005\uffd2\015\uffd2\001\002" +
    "\000\004\006\170\001\002\000\004\006\156\001\002\000" +
    "\010\012\145\023\143\035\157\001\002\000\006\006\164" +
    "\013\165\001\002\000\004\013\163\001\002\000\004\013" +
    "\162\001\002\000\014\006\uffc7\013\uffc7\023\uffc7\024\uffc7" +
    "\035\uffc7\001\002\000\014\006\uffc8\013\uffc8\023\uffc8\024" +
    "\uffc8\035\uffc8\001\002\000\006\023\143\035\166\001\002" +
    "\000\014\006\uffc9\013\uffc9\023\uffc9\024\uffc9\035\uffc9\001" +
    "\002\000\010\006\164\013\uffcf\024\uffcf\001\002\000\006" +
    "\013\uffce\024\uffce\001\002\000\010\012\145\023\143\035" +
    "\171\001\002\000\006\006\164\013\201\001\002\000\010" +
    "\013\177\023\143\035\175\001\002\000\004\013\174\001" +
    "\002\000\014\006\uffcb\013\uffcb\023\uffcb\024\uffcb\035\uffcb" +
    "\001\002\000\004\006\164\001\002\000\004\013\200\001" +
    "\002\000\014\006\uffca\013\uffca\023\uffca\024\uffca\035\uffca" +
    "\001\002\000\014\006\uffc6\013\uffc6\023\uffc6\024\uffc6\035" +
    "\uffc6\001\002\000\014\006\uffcc\013\uffcc\023\uffcc\024\uffcc" +
    "\035\uffcc\001\002\000\022\005\uffd1\007\016\015\uffd1\020" +
    "\013\022\022\023\021\026\023\044\015\001\002\000\006" +
    "\005\uffd0\015\uffd0\001\002\000\006\023\143\035\175\001" +
    "\002\000\006\013\uffcd\024\uffcd\001\002\000\022\005\ufff3" +
    "\007\016\015\ufff3\020\013\022\022\023\021\026\023\044" +
    "\015\001\002\000\004\035\210\001\002\000\006\024\211" +
    "\042\112\001\002\000\022\005\uffed\007\016\015\uffed\020" +
    "\013\022\022\023\021\026\023\044\015\001\002\000\006" +
    "\005\uffec\015\uffec\001\002\000\006\005\ufff2\015\ufff2\001" +
    "\002\000\022\005\ufff1\007\016\015\ufff1\020\013\022\022" +
    "\023\021\026\023\044\015\001\002\000\006\005\ufff0\015" +
    "\ufff0\001\002\000\004\023\217\001\002\000\006\030\220" +
    "\031\221\001\002\000\004\023\262\001\002\000\004\023" +
    "\222\001\002\000\004\013\223\001\002\000\004\014\224" +
    "\001\002\000\016\007\016\020\013\022\022\023\021\026" +
    "\023\044\015\001\002\000\004\015\226\001\002\000\024" +
    "\005\uffbf\007\016\010\231\015\uffbf\020\013\022\022\023" +
    "\021\026\023\044\015\001\002\000\006\005\uffbe\015\uffbe" +
    "\001\002\000\006\005\uffbd\015\uffbd\001\002\000\004\012" +
    "\232\001\002\000\004\023\233\001\002\000\006\030\234" +
    "\031\235\001\002\000\004\023\245\001\002\000\004\023" +
    "\236\001\002\000\004\013\237\001\002\000\004\014\240" +
    "\001\002\000\016\007\016\020\013\022\022\023\021\026" +
    "\023\044\015\001\002\000\004\015\242\001\002\000\024" +
    "\005\uffb8\007\016\010\231\015\uffb8\020\013\022\022\023" +
    "\021\026\023\044\015\001\002\000\006\005\uffb7\015\uffb7" +
    "\001\002\000\006\005\uffb6\015\uffb6\001\002\000\004\013" +
    "\246\001\002\000\004\014\247\001\002\000\016\007\016" +
    "\020\013\022\022\023\021\026\023\044\015\001\002\000" +
    "\004\015\251\001\002\000\026\005\uffbc\007\016\010\231" +
    "\011\252\015\uffbc\020\013\022\022\023\021\026\023\044" +
    "\015\001\002\000\004\014\256\001\002\000\006\005\uffbb" +
    "\015\uffbb\001\002\000\006\005\uffba\015\uffba\001\002\000" +
    "\006\005\uffb9\015\uffb9\001\002\000\016\007\016\020\013" +
    "\022\022\023\021\026\023\044\015\001\002\000\004\015" +
    "\260\001\002\000\022\005\uffb5\007\016\015\uffb5\020\013" +
    "\022\022\023\021\026\023\044\015\001\002\000\006\005" +
    "\uffb4\015\uffb4\001\002\000\004\013\263\001\002\000\004" +
    "\014\264\001\002\000\020\007\016\015\266\020\013\022" +
    "\022\023\021\026\023\044\015\001\002\000\004\015\271" +
    "\001\002\000\024\005\uffc5\007\016\011\252\015\uffc5\020" +
    "\013\022\022\023\021\026\023\044\015\001\002\000\006" +
    "\005\uffc4\015\uffc4\001\002\000\006\005\uffc3\015\uffc3\001" +
    "\002\000\024\005\uffc2\007\016\010\231\015\uffc2\020\013" +
    "\022\022\023\021\026\023\044\015\001\002\000\006\005" +
    "\uffc1\015\uffc1\001\002\000\006\005\uffc0\015\uffc0\001\002" +
    "\000\006\022\276\023\275\001\002\000\004\032\326\001" +
    "\002\000\004\023\277\001\002\000\006\025\301\032\300" +
    "\001\002\000\004\035\310\001\002\000\004\023\302\001" +
    "\002\000\004\013\303\001\002\000\004\014\304\001\002" +
    "\000\016\007\016\020\013\022\022\023\021\026\023\044" +
    "\015\001\002\000\004\015\306\001\002\000\022\005\uffa7" +
    "\007\016\015\uffa7\020\013\022\022\023\021\026\023\044" +
    "\015\001\002\000\006\005\uffa6\015\uffa6\001\002\000\004" +
    "\024\311\001\002\000\004\023\312\001\002\000\004\031" +
    "\313\001\002\000\004\035\314\001\002\000\004\024\315" +
    "\001\002\000\004\023\316\001\002\000\004\006\317\001" +
    "\002\000\004\006\320\001\002\000\004\013\321\001\002" +
    "\000\004\014\322\001\002\000\016\007\016\020\013\022" +
    "\022\023\021\026\023\044\015\001\002\000\004\015\324" +
    "\001\002\000\022\005\uffa9\007\016\015\uffa9\020\013\022" +
    "\022\023\021\026\023\044\015\001\002\000\006\005\uffa8" +
    "\015\uffa8\001\002\000\004\035\327\001\002\000\004\024" +
    "\330\001\002\000\004\023\331\001\002\000\004\031\332" +
    "\001\002\000\004\035\333\001\002\000\004\024\334\001" +
    "\002\000\004\023\335\001\002\000\004\006\336\001\002" +
    "\000\004\006\337\001\002\000\004\013\340\001\002\000" +
    "\004\014\341\001\002\000\016\007\016\020\013\022\022" +
    "\023\021\026\023\044\015\001\002\000\004\015\343\001" +
    "\002\000\022\005\uffab\007\016\015\uffab\020\013\022\022" +
    "\023\021\026\023\044\015\001\002\000\006\005\uffaa\015" +
    "\uffaa\001\002\000\010\021\350\023\346\043\347\001\002" +
    "\000\004\031\371\001\002\000\004\023\363\001\002\000" +
    "\006\013\352\023\351\001\002\000\004\013\356\001\002" +
    "\000\004\014\353\001\002\000\016\007\016\020\013\022" +
    "\022\023\021\026\023\044\015\001\002\000\004\015\355" +
    "\001\002\000\006\005\uffb1\015\uffb1\001\002\000\004\014" +
    "\357\001\002\000\016\007\016\020\013\022\022\023\021" +
    "\026\023\044\015\001\002\000\004\015\361\001\002\000" +
    "\016\007\016\020\013\022\022\023\021\026\023\044\015" +
    "\001\002\000\006\005\uffb0\015\uffb0\001\002\000\004\013" +
    "\364\001\002\000\004\014\365\001\002\000\016\007\016" +
    "\020\013\022\022\023\021\026\023\044\015\001\002\000" +
    "\004\015\367\001\002\000\022\005\uffb3\007\016\015\uffb3" +
    "\020\013\022\022\023\021\026\023\044\015\001\002\000" +
    "\006\005\uffb2\015\uffb2\001\002\000\006\023\372\035\373" +
    "\001\002\000\004\013\u0101\001\002\000\004\013\374\001" +
    "\002\000\004\014\375\001\002\000\016\007\016\020\013" +
    "\022\022\023\021\026\023\044\015\001\002\000\004\015" +
    "\377\001\002\000\022\005\uffad\007\016\015\uffad\020\013" +
    "\022\022\023\021\026\023\044\015\001\002\000\006\005" +
    "\uffac\015\uffac\001\002\000\004\014\u0102\001\002\000\016" +
    "\007\016\020\013\022\022\023\021\026\023\044\015\001" +
    "\002\000\004\015\u0104\001\002\000\022\005\uffaf\007\016" +
    "\015\uffaf\020\013\022\022\023\021\026\023\044\015\001" +
    "\002\000\006\005\uffae\015\uffae\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\007\004\013" +
    "\005\010\006\025\011\024\012\023\015\017\016\011\017" +
    "\016\022\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\035\004\013\005\010\006\025\011\024\012\023\015" +
    "\017\016\011\017\016\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\040\004\013\005\010\006" +
    "\025\011\024\012\023\015\017\016\011\017\016\022\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\130\004\013\005\010\006\025\011\024\012\023\015\017" +
    "\016\011\017\016\022\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\056\001\001\000\002\001\001\000\026\003\060\004" +
    "\013\005\010\006\025\011\024\012\023\015\017\016\011" +
    "\017\016\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\063\001\001\000\002\001\001\000\026" +
    "\003\065\004\013\005\010\006\025\011\024\012\023\015" +
    "\017\016\011\017\016\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\112\001\001\000\002\001" +
    "\001\000\004\005\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\143\014\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\150\004\013\005\010\006\025\011\024\012\023" +
    "\015\017\016\011\017\016\022\026\001\001\000\002\001" +
    "\001\000\026\003\152\004\013\005\010\006\025\011\024" +
    "\012\023\015\017\016\011\017\016\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\157\014\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\171\014\172\001\001" +
    "\000\002\001\001\000\004\014\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\202\004\013\005\010\006\025\011\024\012\023" +
    "\015\017\016\011\017\016\022\026\001\001\000\002\001" +
    "\001\000\004\014\204\001\001\000\002\001\001\000\026" +
    "\003\212\004\013\005\010\006\025\011\024\012\023\015" +
    "\017\016\011\017\016\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\211\004\013\005\010\006" +
    "\025\011\024\012\023\015\017\016\011\017\016\022\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\214\004\013\005\010\006\025\011\024\012\023\015\017" +
    "\016\011\017\016\022\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\224\004\013\005\010\006\025\011\024\012\023\015\017" +
    "\016\011\017\016\022\026\001\001\000\002\001\001\000" +
    "\030\003\226\004\013\005\010\006\025\010\227\011\024" +
    "\012\023\015\017\016\011\017\016\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\240" +
    "\004\013\005\010\006\025\011\024\012\023\015\017\016" +
    "\011\017\016\022\026\001\001\000\002\001\001\000\030" +
    "\003\242\004\013\005\010\006\025\010\243\011\024\012" +
    "\023\015\017\016\011\017\016\022\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\247\004\013\005\010\006\025\011\024" +
    "\012\023\015\017\016\011\017\016\022\026\001\001\000" +
    "\002\001\001\000\032\003\253\004\013\005\010\006\025" +
    "\010\254\011\024\012\023\015\017\016\011\017\016\020" +
    "\252\022\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\256\004" +
    "\013\005\010\006\025\011\024\012\023\015\017\016\011" +
    "\017\016\022\026\001\001\000\002\001\001\000\026\003" +
    "\260\004\013\005\010\006\025\011\024\012\023\015\017" +
    "\016\011\017\016\022\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\264\004\013" +
    "\005\010\006\025\011\024\012\023\015\017\016\011\017" +
    "\016\022\026\001\001\000\002\001\001\000\030\003\267" +
    "\004\013\005\010\006\025\011\024\012\023\015\017\016" +
    "\011\017\016\020\266\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\271\004\013\005\010\006" +
    "\025\010\272\011\024\012\023\015\017\016\011\017\016" +
    "\022\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\304\004\013\005\010" +
    "\006\025\011\024\012\023\015\017\016\011\017\016\022" +
    "\026\001\001\000\002\001\001\000\026\003\306\004\013" +
    "\005\010\006\025\011\024\012\023\015\017\016\011\017" +
    "\016\022\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\322\004\013\005\010\006\025\011\024\012\023\015\017" +
    "\016\011\017\016\022\026\001\001\000\002\001\001\000" +
    "\026\003\324\004\013\005\010\006\025\011\024\012\023" +
    "\015\017\016\011\017\016\022\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\341\004\013\005" +
    "\010\006\025\011\024\012\023\015\017\016\011\017\016" +
    "\022\026\001\001\000\002\001\001\000\026\003\343\004" +
    "\013\005\010\006\025\011\024\012\023\015\017\016\011" +
    "\017\016\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\353\004" +
    "\013\005\010\006\025\011\024\012\023\015\017\016\011" +
    "\017\016\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\357\004\013\005\010" +
    "\006\025\011\024\012\023\015\017\016\011\017\016\022" +
    "\026\001\001\000\002\001\001\000\026\003\361\004\013" +
    "\005\010\006\025\011\024\012\023\015\017\016\011\017" +
    "\016\022\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\365\004\013\005\010\006" +
    "\025\011\024\012\023\015\017\016\011\017\016\022\026" +
    "\001\001\000\002\001\001\000\026\003\367\004\013\005" +
    "\010\006\025\011\024\012\023\015\017\016\011\017\016" +
    "\022\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\375\004\013\005\010\006\025\011\024\012\023\015" +
    "\017\016\011\017\016\022\026\001\001\000\002\001\001" +
    "\000\026\003\377\004\013\005\010\006\025\011\024\012" +
    "\023\015\017\016\011\017\016\022\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\u0102\004\013\005" +
    "\010\006\025\011\024\012\023\015\017\016\011\017\016" +
    "\022\026\001\001\000\002\001\001\000\026\003\u0104\004" +
    "\013\005\010\006\025\011\024\012\023\015\017\016\011" +
    "\017\016\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public Symbol s;

	/*public static void main (String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new parser(new Yylex(System.in)).parse();
	}*/
	
	public void syntax_error(Symbol s){
                this.s = s;
		report_error("Error de sintaxis. Linha: " +(s.right + 1) +
		" Coluna: " + s.left + ". Texto: \"" + s.value + "\"", null);
       // public static void carregar(String arquivo) throws Exception{
       // new parser(new Yylex(new FileInputStream(arquivo))).parse();
        }

        public Symbol getS () {
            return s;
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // laco_for_each ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR DOIS_PONTOS VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for_each",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // laco_for_each ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR DOIS_PONTOS VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for_each",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // laco_for ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // laco_for ::= FOR ABRE_PARENTESES TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // laco_for ::= FOR ABRE_PARENTESES VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // laco_for ::= FOR ABRE_PARENTESES VAR ATRIBUICAO NUMERO PONTO_VIRGULA VAR OPERADOR_CONDICIONAL NUMERO PONTO_VIRGULA VAR OPERADOR_ARITMETICO OPERADOR_ARITMETICO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL NUMERO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL NUMERO FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // laco_while ::= WHILE ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // laco_while ::= WHILE ABRE_PARENTESES BOOLEAN VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // laco_while ::= WHILE ABRE_PARENTESES BOOLEAN FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // laco_while ::= WHILE ABRE_PARENTESES OPERADOR_LOGICO_NOT VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // laco_while ::= WHILE ABRE_PARENTESES OPERADOR_LOGICO_NOT VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("laco_while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicional_senao ::= COND_ELSE ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicional_senao ::= COND_ELSE ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicional_senaose ::= COND_ELIF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_senaose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_CONDICIONAL VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES condicional_senaose 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES programa FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES FECHA_CHAVES programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES FECHA_CHAVES condicional_senao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicional ::= COND_IF ABRE_PARENTESES VAR OPERADOR_LOGICO VAR FECHA_PARENTESES ABRE_CHAVES FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO operacao_aritmetica_parenteses operacao_aritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES operacao_aritmetica_parenteses OPERADOR_ARITMETICO operacao_aritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES operacao_aritmetica_parenteses OPERADOR_ARITMETICO operacao_aritmetica_parenteses FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES operacao_aritmetica_parenteses OPERADOR_ARITMETICO NUMERO FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO operacao_aritmetica_parenteses FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO operacao_aritmetica FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacao_aritmetica_parenteses ::= ABRE_PARENTESES NUMERO OPERADOR_ARITMETICO NUMERO FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica_parenteses",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacao_aritmetica ::= VAR OPERADOR_ARITMETICO operacao_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacao_aritmetica ::= NUMERO OPERADOR_ARITMETICO operacao_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacao_aritmetica ::= NUMERO OPERADOR_ARITMETICO NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacao_aritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica_parenteses PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica_parenteses PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao_aritmetica ::= VAR ATRIBUICAO operacao_aritmetica PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // escrever ::= PRINT ABRE_PARENTESES VAR FECHA_PARENTESES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // escrever ::= PRINT ABRE_PARENTESES VAR FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // escrever ::= PRINT ABRE_PARENTESES TEXTO FECHA_PARENTESES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // escrever ::= PRINT ABRE_PARENTESES TEXTO FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escrever",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ABRE_COLCHETES NUMERO FECHA_COLCHETES ATRIBUICAO ABRE_COLCHETES vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracao_atribuicao ::= VAR ATRIBUICAO NUMERO PONTO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracao_atribuicao ::= VAR ATRIBUICAO BOOLEAN VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO BOOLEAN VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO BOOLEAN PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracao_atribuicao ::= VAR ATRIBUICAO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracao_atribuicao ::= VAR ATRIBUICAO TEXTO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO TEXTO VIRGULA declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracao_atribuicao ::= TIPOS_PRIMITIVOS VAR ATRIBUICAO TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_atribuicao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vetores_recursivo ::= TEXTO VIRGULA vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vetores_recursivo ::= NUMERO VIRGULA vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vetores_recursivo ::= TEXTO FECHA_COLCHETES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vetores_recursivo ::= TEXTO FECHA_COLCHETES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vetores_recursivo ::= NUMERO FECHA_COLCHETES PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vetores_recursivo ::= NUMERO FECHA_COLCHETES PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetores_recursivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atribuicao ::= VAR ABRE_COLCHETES NUMERO FECHA_COLCHETES ATRIBUICAO ABRE_COLCHETES vetores_recursivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO NUMERO PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atribuicao ::= VAR ATRIBUICAO BOOLEAN PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atribuicao ::= VAR ATRIBUICAO BOOLEAN PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atribuicao ::= VAR ATRIBUICAO TEXTO PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atribuicao ::= VAR ATRIBUICAO TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atribuicao ::= VAR ATRIBUICAO NUMERO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracao ::= TIPOS_PRIMITIVOS VAR PONTO_VIRGULA programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracao ::= TIPOS_PRIMITIVOS VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // programa ::= laco_for_each 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // programa ::= laco_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // programa ::= laco_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programa ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa ::= expressao_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa ::= escrever 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= declaracao_atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= declaracao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= IFMUZ DOIS_PONTOS BEGIN programa END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= IFMUZ DOIS_PONTOS BEGIN END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

